# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MxatcI0quSxDfEs29n9iA9UuMrBQBSPB
"""

# Command interface
class Command:
    def execute(self):
        pass

# Concrete command classes
class TurnOnLightCommand(Command):
    def __init__(self, light):
        self.light = light

    def execute(self):
        self.light.turn_on()

class TurnOffLightCommand(Command):
    def __init__(self, light):
        self.light = light

    def execute(self):
        self.light.turn_off()

# Receiver class
class Light:
    def turn_on(self):
        print("Turning on light...")

    def turn_off(self):
        print("Turning off light...")

# Invoker class
class RemoteControl:
    def __init__(self):
        self.commands = {}

    def add_command(self, name, command):
        self.commands[name] = command

    def execute_command(self, name):
        if name in self.commands:
            self.commands[name].execute()
        else:
            print("Command not found.")

# Usage example
light = Light()
remote_control = RemoteControl()

remote_control.add_command("turn_on_light", TurnOnLightCommand(light))
remote_control.add_command("turn_off_light", TurnOffLightCommand(light))

remote_control.execute_command("turn_on_light")
remote_control.execute_command("turn_off_light")